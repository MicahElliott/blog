{:title "The Right Tool for the Job??"
 :layout :post
 :tags  ["draft" "thoughts"]
 :toc false
}

**Audience:** _anyone_

[aa, bb]
> All languages (and environments) have some warts.

There’s a cliché among programmers that one should “choose the right
tool for the job.” In most cases, it’s not the tool that’s right — it’s the
circumstances. Let’s explore where this “right tool” thinking falls short, and
where its contrapositive (avoiding the wrong tool) is actually useful.

(The best “tool” is probably a better topic for discussing text editors/IDEs,
databases, OSes, and the like. Maybe for another post.)

++++
<!-- more -->
++++

Why must we use a language like Clojure for web development instead of, say,
Racket. Is Clojure a better language for this job? Probably not. However, it
does have a vast set of libraries to choose from, web servers to deploy to,
and books to reference.

And why is Racket the better language for teaching? Because it is very light,
and thus able to run on any student system. It’s arguably a bit simpler to
learn.

But could Clojure be just as good as Racket as a teaching language if, say, the
runtime got lighter, or the setup became less complex? I think so. And could
Racket be just as viable for building your next start-up on? Sure, if the
libraries were there.

The point is: we should be more patient with our allegiances to one language
camp or another. Racket may yet get there, and you have an opportunity to build
the stepping stones that will take it there.

== The Pigeon Holes

=== Async, Web Sokets
Node

=== Fast
C, OCaml

=== Parallelism
Clojure

=== Concurrency

=== Type safe
OCaml, Haskell, Java, C++

=== UI
Javascript

Nee: ClojureScript, Elm

=== Statistics
R. Nothing Beats it for interactive stats exploration.

Incanter/repl not enough


=== Student oriented
Python, Racket

=== Popularity
Java, Ruby


=== Real Shortcomings
- R has limited data structures, and can be slow for large data sets

- Clojure is bulky and won’t run well on small-memory (student) machines.
  Start-up time is long. That can be pretty annoying (depending on your
  workflow).

- Racket, OCaml, and Elm lack diversity of books. They also lack the libraries
  you’ll find with other popular systems.

- ClojureScript and Elm are bleeding edge.

- Node/JS make tree traversal painful

- Ruby is slow. It just is. This might not impact you for your web app, but you
  should be aware of it.

- OCaml may be awesome, but something like Ocsigen is not enough to get you
  quickly productive in web development.

And now I will exit in a ball of flames...

- Most tasteful languages (excluding OCaml, Haskell, Elm) are dynamically typed.
  Some feel that this can bite you.

- Java/C++ are terribly verbose and painful to use

- If you think you need Perl, just use Awk. If Awk isn’t enough, go to
  something besides Perl.

- Most languages are not very functional, and so are generally unkind to
  program in. For this reason, avoid these: Java, C++, Python, Ruby

- Erlang is weird

- Elixir and Crystal inherit some badness from Ruby

- Scala is a Frankenstein

- Haskell makes simple things hard
